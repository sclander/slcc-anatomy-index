{"version":3,"sources":["components/results/resultListSlice.js","components/filters/Filters.js","components/searchBar/SearchBar.js","components/results/Result.js","components/results/ResultList.js","components/home/Home.js","components/admin/Admin.js","components/firebase/context.js","components/firebase/firebase.js","components/firebase/index.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["applyFilters","terms","filters","searchQuery","isEmpty","filter","elem","name","includes","match","parseInt","substr","activity","resultListSlice","createSlice","initialState","filteredTerms","reducers","update","state","action","payload","toggleFilter","clearFilters","updateSearchQuery","clearSearchQuery","actions","selectResultList","resultList","selectFilters","selectSearchQuery","Filters","useSelector","dispatch","useDispatch","renderFilter","num","className","onClick","SearchBar","query","onChange","event","target","value","placeholder","length","clearButton","Result","props","data","result","badgeClassName","table","newName","replace","dangerouslySetInnerHTML","__html","renderName","parentStructure","definition","location","function","origin","insertion","ResultList","results","firebase","db","collection","get","then","things","docs","map","sortBy","res","indexOf","key","renderResults","Home","Admin","onSubmit","e","preventDefault","add","handleSubmit","type","FirebaseContext","React","createContext","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","term","id","ref","app","initializeApp","this","firestore","App","path","Consumer","configureStore","reducer","resultListReducer","Boolean","window","hostname","ReactDOM","render","StrictMode","store","Provider","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5fcb6b4.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { filter, includes, isEmpty } from 'lodash';\n\nconst applyFilters = (terms, filters, searchQuery) => {\n  let filteredTerms;\n  if (!isEmpty(filters) && !isEmpty(searchQuery)) {\n    filteredTerms = filter(terms, elem => {\n      let match = false;\n      for (const filter of filters) {\n        if (filter.includes('a')) {\n          if (parseInt(filter.substr(1)) === elem.activity && elem.name.includes(searchQuery)) {\n            match = true;\n          }\n        }\n      }\n      return match;\n    });\n  } else if (!isEmpty(filters)) {\n    filteredTerms = filter(terms, elem => {\n      let match = false;\n      for (const filter of filters) {\n        if (filter.includes('a')) {\n          if (parseInt(filter.substr(1)) === elem.activity) {\n            match = true;\n          }\n        }\n      }\n      return match;\n    });\n  } else if (!isEmpty(searchQuery)) {\n    filteredTerms = filter(terms, elem => {\n      return elem.name.includes(searchQuery);\n    });\n  } else {\n    filteredTerms = terms;\n  }\n  return filteredTerms;\n}\n\nexport const resultListSlice = createSlice({\n  name: 'resultList',\n  initialState: {\n    terms: [],\n    filters: [],\n    filteredTerms: [],\n    searchQuery: ''\n  },\n  reducers: {\n    update: (state, action) => {\n      state.terms = action.payload;\n      state.filteredTerms = action.payload\n    },\n    toggleFilter: (state, action) => {\n      if (includes(state.filters, action.payload)) {\n        state.filters = filter(state.filters, elem => elem !== action.payload);\n      } else {\n        state.filters = [...state.filters, action.payload]\n      }\n      state.filteredTerms = applyFilters(state.terms, state.filters, state.searchQuery);\n    },\n    clearFilters: (state) => {\n      state.filters = [];\n      state.filteredTerms = state.terms;\n    },\n    updateSearchQuery: (state, action) => {\n      state.searchQuery = action.payload;\n      state.filteredTerms = applyFilters(state.terms, state.filters, state.searchQuery);\n    },\n    clearSearchQuery: state => {\n      state.filters = [];\n      state.searchQuery = '';\n      state.filteredTerms = state.terms;\n    },\n  },\n});\n\nexport const { update, toggleFilter, clearFilters, updateSearchQuery, clearSearchQuery } = resultListSlice.actions;\n\nexport const selectResultList = state => state.resultList.filteredTerms;\nexport const selectFilters = state => state.resultList.filters;\nexport const selectSearchQuery = state => state.resultList.searchQuery;\n\nexport default resultListSlice.reducer;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toggleFilter, clearFilters, selectFilters } from '../results/resultListSlice';\nimport { includes, isEmpty } from 'lodash';\n\nfunction Filters() {\n    const filters = useSelector(selectFilters);\n    const dispatch = useDispatch();\n\n    const renderFilter = (num, filters) => {\n        let className = `filter a${num}`;\n        if (includes(filters, `a${num}`) || isEmpty(filters)) {\n            className = `filter a${num} active`\n        }\n\n        return (\n            <div className={className} onClick={() => dispatch(toggleFilter(`a${num}`))}>\n                {`A${num}`}\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            <h3 className=\"filters-title\">Filters</h3>\n            <div className=\"filters\">\n                {renderFilter(1, filters)}\n                {renderFilter(2, filters)}\n                {renderFilter(3, filters)}\n                {renderFilter(4, filters)}\n                {renderFilter(5, filters)}\n                {renderFilter(6, filters)}\n                {renderFilter(7, filters)}\n                {renderFilter(8, filters)}\n                {renderFilter(9, filters)}\n                {renderFilter(10, filters)}\n                {renderFilter(11, filters)}\n                {renderFilter(12, filters)}\n            </div>\n        </div>\n    );\n}\n\nexport default Filters;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n    updateSearchQuery,\n    clearSearchQuery,\n    selectSearchQuery,\n} from '../results/resultListSlice';\n\nfunction SearchBar() {\n    const query = useSelector(selectSearchQuery);\n    const dispatch = useDispatch();\n\n    const clearButton = (query) => {\n        if (query.length > 0) {\n            return (\n                <span \n                    className=\"search-bar__clear\"\n                    onClick={() => dispatch(clearSearchQuery())}\n                >X</span>\n            )\n        }\n    }\n\n    return (\n        <div className=\"search-bar\">\n            <input \n                className=\"search-bar__input\"\n                onChange={event => dispatch(updateSearchQuery(event.target.value))}\n                value={query}\n                placeholder=\"Search\"\n            />\n            {clearButton(query)}\n        </div>\n    );\n}\n\nexport default SearchBar;","import React, { useEffect } from 'react';\n\nfunction Result(props) {\n  const data = props.result;\n  const searchQuery = props.searchQuery;\n  const badgeClassName = `badge a${data.activity}`;\n\n  const renderName = name => {\n    if (searchQuery) {\n      const newName = name.replace(searchQuery, `<span class=\"match\">${searchQuery}</span>`);\n      return (\n        <h6 className=\"result-name\" dangerouslySetInnerHTML={{__html: newName}}></h6>\n      )\n    }\n    return <h6 className=\"result-name\">{name}</h6>\n  }\n\n  return (\n    <div className=\"result\">\n      <div className={badgeClassName}>\n        <span>{`${data.activity}-${data.table}`}</span>\n      </div>\n      <div className=\"result-text\">\n        {renderName(data.name)}\n        {data.parentStructure && <b className=\"result-parent\">part of the {data.parentStructure}</b>}\n        <p className=\"result-definition\">{data.definition}</p>\n        {data.location && <p className=\"result-location\"><span>Location: </span>{data.location}</p>}\n        {data.function && <p className=\"result-function\"><span>Function: </span>{data.function}</p>}\n        {data.action && <p className=\"result-action\"><span>Action: </span>{data.action}</p>}\n        {data.origin && <p className=\"result-origin\"><span>Origin: </span>{data.origin}</p>}\n        {data.insertion && <p className=\"result-insertion\"><span>Insertion: </span>{data.insertion}</p>}\n      </div>\n    </div>\n  )\n}\n\nexport default Result;","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { update, selectResultList, selectSearchQuery } from './resultListSlice';\nimport { sortBy, isEmpty } from 'lodash';\nimport Result from './Result';\n\nfunction ResultList(props) {\n  const results = useSelector(selectResultList);\n  const searchQuery = useSelector(selectSearchQuery);\n  const dispatch = useDispatch();\n\n  if (isEmpty(results)) {\n    const terms = props.firebase.db.collection('terms');\n    terms.get().then(things => {\n      const data = things.docs.map(elem => elem.data());\n      dispatch(update(data));\n    });\n  }\n\n  const renderResults = results => {\n    let sortedResults;\n    if (searchQuery.length > 0) {\n      sortedResults = sortBy(results, [res => {return res.name.indexOf(searchQuery)}, 'activity', 'table', 'name']);\n    } else {\n      sortedResults = sortBy(results, ['activity', 'table', 'name']);\n    }\n    return sortedResults.map(result => {\n      const key = `${result.activity}-${result.table}-${result.name}`;\n      return (\n        <Result result={result} key={key} searchQuery={searchQuery}></Result>\n      );\n    });\n  }\n\n\n\treturn (\n    <div className=\"results\">\n      {renderResults(results)}\n    </div>\n\t);\n}\n\nexport default ResultList;","import React from 'react';\n\nimport Filters from '../filters/Filters';\nimport SearchBar from '../searchBar/SearchBar';\nimport ResultList from '../results/ResultList';\n\nfunction Home(props) {\n    return (\n        <div className=\"app\">\n            <Filters></Filters>\n            <SearchBar></SearchBar>\n            <ResultList firebase={props.firebase}></ResultList>\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\n\nconst handleSubmit = (e, props) => {\n\te.preventDefault();\n\tconst termsRef = props.firebase.db.collection(\"terms\").add({\n\t\tactivity: parseInt(e.target.activity.value),\n\t\ttable: parseInt(e.target.table.value),\n\t\tname: e.target.name.value,\n\t\tdefinition: e.target.definition.value,\n\t\t...(e.target.parentStructure.value.length > 0 && {parentStructure: e.target.parentStructure.value}),\n\t\t...(e.target.location.value.length > 0 && {location: e.target.location.value}),\n\t\t...(e.target.function.value.length > 0 && {function: e.target.function.value}),\n\t\t...(e.target.origin.value.length > 0 && {origin: e.target.origin.value}),\n\t\t...(e.target.insertion.value.length > 0 && {insertion: e.target.insertion.value}),\n\t\t...(e.target.action.value.length > 0 && {action: e.target.action.value}),\n\t}); \n\te.target.name.value = \"\";\n\te.target.definition.value = \"\";\n\te.target.location.value = \"\";\n\te.target.function.value = \"\";\n\te.target.origin.value = \"\";\n\te.target.insertion.value = \"\";\n\te.target.action.value = \"\";\n}\n\nfunction Admin(props) {\n\treturn (\n\t\t<div>\n\t\t\t<h2>Add new term</h2>\n\t\t\t<form onSubmit={e => handleSubmit(e, props)}>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Activity</label>\n\t\t\t\t\t<input name=\"activity\"></input>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Table</label>\n\t\t\t\t\t<input name=\"table\"></input>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Parent Structure</label>\n\t\t\t\t\t<input name=\"parentStructure\"></input>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Name</label>\n\t\t\t\t\t<input name=\"name\"></input>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Definition</label>\n\t\t\t\t\t<textarea name=\"definition\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Location</label>\n\t\t\t\t\t<textarea name=\"location\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Function</label>\n\t\t\t\t\t<textarea name=\"function\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Action</label>\n\t\t\t\t\t<textarea name=\"action\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Origin</label>\n\t\t\t\t\t<textarea name=\"origin\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<label>Insertion</label>\n\t\t\t\t\t<textarea name=\"insertion\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"submit\">Add new term</button>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default Admin;","import React from 'react';\n \nconst FirebaseContext = React.createContext(null);\n \nexport default FirebaseContext;","import app from 'firebase/app';\nimport 'firebase/firestore';\n \nconst config = {\n  apiKey: \"AIzaSyDFqGRk5Ml1MqkspZRLSqOQq7AdOew9s_U\",\n  authDomain: \"slcc-anatomy-index.firebaseapp.com\",\n  databaseURL: \"https://slcc-anatomy-index.firebaseio.com\",\n  projectId: \"slcc-anatomy-index\",\n  storageBucket: \"slcc-anatomy-index.appspot.com\",\n  messagingSenderId: \"538776168870\",\n  appId: \"1:538776168870:web:214cf1e795acb1de644767\"\n};\n \nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    this.db = app.firestore();\n  }\n\n  // *** User API ***\n \n  term = id => this.db.ref(`terms/${id}`);\n \n  terms = () => this.db.ref('terms');\n}\n \nexport default Firebase;","import FirebaseContext from './context';\nimport Firebase from './firebase';\n \nexport default Firebase;\n \nexport { FirebaseContext };","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.scss';\r\n\r\nimport Home from './components/home/Home';\r\nimport Admin from './components/admin/Admin';\r\nimport { FirebaseContext } from './components/firebase';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <h1>SLCC Anatomy Index</h1>\r\n\r\n        <Switch>\r\n          <Route path=\"/admin\">\r\n            <FirebaseContext.Consumer>\r\n              {firebase => <Admin firebase={firebase} />}\r\n            </FirebaseContext.Consumer>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <FirebaseContext.Consumer>\r\n              {firebase => <Home firebase={firebase} />}\r\n            </FirebaseContext.Consumer>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}","import { configureStore } from '@reduxjs/toolkit';\r\nimport resultListReducer from '../components/results/resultListSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    resultList: resultListReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport Firebase, { FirebaseContext } from './components/firebase';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <FirebaseContext.Provider value={new Firebase()}>\r\n        <App />\r\n      </FirebaseContext.Provider>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}